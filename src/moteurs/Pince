package moteurs;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.EV3MediumRegulatedMotor;
import lejos.hardware.motor.MindsensorsGlideWheelMRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.Port;
import lejos.robotics.RegulatedMotor;

public class Pince {

	private RegulatedMotor pinces;
	public boolean ouvert;
	

	public Pince(Port pincesPort) {
		pinces = new MindsensorsGlideWheelMRegulatedMotor(pincesPort);
		ouvert=false;
	}
	
	
	public void fermer(){ // si les pinces sont ouvertes alors on peut fermer, et on on change le boolean en false pour dire que ces pinces sont desormais fermées
		if(this.estOuvert()) {
			pinces.rotate(-1000);
		}
		this.ouvert=false;
	}

	/*public void fermer(int angle){
		pinces.rotate(-angle);
		this.angle=this.angle-angle;
	}*/

	public void fermerObligatoirement() {// si les pinces sont ouvertes alors on peut fermer, et on on change le boolean en false pour dire que ces pinces sont desormais fermées
		pinces.setSpeed(800);
		pinces.rotate(-1000);
		this.ouvert=false;
	}

	public void ouvrir() {// si les pinces sont fermer alors on peut ouvrir, et on on change le boolean en true pour dire que ces pinces sont desormais ouvertes
		if(!this.estOuvert()) {
			this.pinces.rotate(1000);
		}
		this.ouvert=true;
	}

	/*public void ouvrir(int angle){
		pinces.rotate(angle);
		this.angle=this.angle+angle;
	}*/
	public void setOuvert(boolean b) {
		ouvert=b;
	}
	public boolean estOuvert() {
		return this.ouvert;
	}

	public boolean estFermée(){ // renvoie true ou false en fonction de si les pinces sont ouvertes 
		return !this.ouvert;
	}
}


