package iapackage;

import moteurs.*;

import capteurs.*;
import lejos.utility.Delay;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.SensorPort;
import lejos.robotics.Color;

//-----------------------------------------------BASE DE LA CLASSE-------------------------------------------------

public class Principal {
	private static Action a;
	private static ToucherCapteur touch;
	private static Pince pince;
	private static DistanceCapteur distance;
	private static CouleurCapteur color;
	private int angle; //représente l'angle vers lequel le robot est tourné

	public Principal(Action action, Pince pince, ToucherCapteur t, DistanceCapteur d,CouleurCapteur c) {
		this.a=action;
		this.pince=pince;
		this.touch=t;
		this.distance=d;
		this.color=c;
		this.angle=0;
	}

//-----------------------------------------------Début du jeu-------------------------------------------------
	
	public void case345(boolean droite){//code adapté aux stratégies 3,4 et 5
		if(droite) { //si on veut décaler à droite
			pince.ouvrir();
			avancerPlusPrendrePaletAsync(300);
			a.seDecalerD();
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			a.tournerG(90);
			avancerJusqueLigne();
			a.avancer(100, 200);//réavancer pour que le centre de notre robot soit sur la ligne, et pas le capteur couleur
			avancerJusqueLigne();
			a.avancer(100, 200);//réavancer pour que le centre de notre robot soit sur la ligne, et pas le capteur couleur
			a.tournerG(90);
		}else {
			pince.ouvrir();
			avancerPlusPrendrePaletAsync(300);
			a.seDecalerG();
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			a.tournerD(90);
			avancerJusqueLigne();
			a.avancer(100, 200);//réavancer pour que le centre de notre robot soit sur la ligne, et pas le capteur couleur
			avancerJusqueLigne();
			a.avancer(100, 200);//réavancer pour que le centre de notre robot soit sur la ligne, et pas le capteur couleur
			a.tournerD(90);
		}
	}

	public void test3palets1(boolean droite){//récupère les trois palets de la ligne en face du robot
		if(droite) {//si on veut passer par la droite
			pince.ouvrir();
			avancerPlusPrendrePaletAsync(100);
			a.seDecalerD();
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			a.tournerG(90);
			avancerJusqueLigne();
			a.avancer(100, 200);//réavancer pour que le centre de notre robot soit sur la ligne, et pas le capteur couleur
			a.tournerG(90);
			avancerPlusPrendrePaletAsync(300);
			a.tournerG(180);
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			a.tournerG(180);
			avancerPlusPrendrePaletAsync(300);
			a.tournerG(180);
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			pince.fermer();	
		}else {//si on veut passer par la gauche
			pince.ouvrir();
			avancerPlusPrendrePaletAsync(300);
			a.seDecalerG();
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			a.tournerD(90);
			avancerJusqueLigne();
			a.avancer(100, 200);
			a.tournerD(90);
			avancerPlusPrendrePaletAsync(300);
			a.tournerG(180);
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			a.tournerG(180);
			avancerPlusPrendrePaletAsync(300);
			a.tournerG(180);
			avancerJusqueCouleur("blanc");
			pince.ouvrir();
			a.reculer(100, 300);
			pince.fermer();		
		}
	}

//-----------------------------------------------Méthode recherche-------------------------------------------------
	
	public void recherche() { // permet de se tourner vers le palet le plus proche et d'aller le récupérer 
		float[] tab = new float[0];
		int j=0;
		int t=0;
		boolean b;//TODO peut etre enlever
		float min = (float)0.80;
		long start = System.currentTimeMillis();
		a.asyncTournerG(360);
		while(a.isMoving()) {
			tab=distance.recherche(tab);
			if(tab[tab.length-1]!=0 && tab[tab.length-1]+0.1<min){
				j=tab.length-1;
			}
			if(tab[tab.length-1]!=0 && tab[tab.length-1]<min) {
				min=tab[tab.length-1];
			}if((tab.length>1) && (j!=0) && (tab[tab.length-1]!=0) && (tab[tab.length-2]-0.1<min) && (tab[tab.length-1]-0.1>min) ){
				t=tab.length-1;
				if (min>0.15 && min<0.35 && (t-j)<300 && (t-j)>10) {
					a.stop();
					long end = System.currentTimeMillis();
					long dist = end-start;
					angle+=(360/5200)*dist-52;
					a.tournerD(40);
					b=false;
					if (!avancerPlusPrendrePalet(200,(int)((min+0.3)*1000))){
						a.reculer((int)(min+0.1)*1000, 250);
						recherche();
					}
				}else if (min>0.35 && min<0.45 && (t-j)<250 && (t-j)>10) {
					a.stop();
					long end = System.currentTimeMillis();
					long dist = end-start;
					angle+=(360/5200)*dist-54;
					a.tournerD(40);
					b=false;
					if (!avancerPlusPrendrePalet(200,(int)(min+0.3)*1000)){
						a.reculer((int)(min+0.1)*1000, 250);
						recherche();
					}
				}else if (min>0.45 && min<0.55 && (t-j)<200 && (t-j)>10) {
					a.stop();
					long end = System.currentTimeMillis();
					long dist = end-start;
					angle+=(360/5200)*dist-54;
					a.tournerD(40);
					b=false;
					if (!avancerPlusPrendrePalet(200,(int)(min+0.3)*1000)){
						a.reculer((int)(min+0.1)*1000, 250);
						recherche();
					}
				}else if (min>0.55 && min<0.75 && (t-j)<100 && (t-j)>10) {
					a.stop();
					long end = System.currentTimeMillis();
					long dist = end-start;
					angle+=(360/5200)*dist-54;
					a.tournerD(40);
					b=false;
					if (!avancerPlusPrendrePalet(200,(int)(min+0.3)*1000)){
						a.reculer((int)(min+0.1)*1000, 250);
						recherche();
					}
				}
				min=(float)0.80;
				j=0;
				t=0;
			}
		}	
	}
	
	public static double tempsVersAngle(long t) { // renvoie l'angle associé au temps de rotation (avec une fonction polynome)
		return (-1.95*(long)Math.pow(10, -6)*t*t+0.0906*t-58.36);
	}
	
	public void recalibrage() { //permet de se recalibrer vers le but adverse après une méthode "recherche"
		int ang= angle%360;
		this.angle=0;
		a.tournerD(ang);
	}
	
//------------------------------------------AvancerPlusPrendrePalet--------------------------------------------
	
	public boolean avancerPlusPrendrePalet(int vitesse, int dis) {
		if (!pince.estOuvert())
			pince.ouvrir();
		System.out.println("je dois avancer de " + dis/10 +"cm");
		a.setVitesse(vitesse);
		a.avancerAsync(dis);
		while(a.isMoving()) { //s'arrête que quand le capteur touche le palet
			if(touch.estTouche()) {
				a.stop();
				pince.fermer();
				System.out.println("true");
				return true;
			}
		}
		pince.fermer();
		System.out.println("false");
		return false;
	}
	
	public void avancerPlusPrendrePaletAsync(int vitesse) {// avancer jusuqu'au palet de maniere asynchrone puis ferme les pinces
		a.setVitesse(vitesse);
		a.avancerAsync(2000);
		while(a.isMoving()) { //s'arrête que quand le capteur touche le palet
			Color rgb = color.getCouleur();
			if (distance.getDistance()<=0.20) {
				a.setVitesse(150);
			}
			if (touch.estTouche() || color.nomCouleur(rgb.getRed(), rgb.getGreen(), rgb.getBlue())=="blanc"){
				a.stop();
			}
		}	
		pince.fermer();
	}

//------------------------------------------Avancer jusqu'à une couleur--------------------------------------------

	public void avancerJusqueCouleur(String c) {// avance jusqu'à la détéction de la couleur en paramètre
		a.setVitesse(300);
		Color rgb = color.getCouleur();
		a.avancer();
		while(color.nomCouleur(rgb.getRed(), rgb.getGreen(), rgb.getBlue()) != c) {
			rgb = color.getCouleur();
		}a.stop();

	}

	public void avancerJusqueLigne() {// avance jusqu'a une ligne noire, rouge ou jaune (pour se décaler d'une case)
		a.avancerAsync(300);
		Color rgb = color.getCouleur();
		while(color.nomCouleur(rgb.getRed(), rgb.getGreen(), rgb.getBlue()) != "rouge" || color.nomCouleur(rgb.getRed(), rgb.getGreen(), rgb.getBlue()) != "jaune"|| color.nomCouleur(rgb.getRed(), rgb.getGreen(), rgb.getBlue()) != "noir") {
			rgb = color.getCouleur();
		}a.stop();

	}
//----------------------------------------------------Autres------------------------------------------------------

	public void eviterRobot() { // permet d'éviter les robots adverses lorsqu'ils sont en face
		if (!pince.estOuvert()&&touch.estTouche()&&distance.getDistance()<270) {
			float distanceProvisoire=distance.getDistance();
			Delay.msDelay(100);
			if(distance.getDistance()<distanceProvisoire-5)
				a.tournerD(100);
			a.avancer(150,100);
			a.tournerG(100);
		}
	}
	
//----------------------------------------------------Main------------------------------------------------------

	public static void main(String[] args) {
		Principal p = new Principal(new Action(MotorPort.D,MotorPort.C),new Pince(MotorPort.A),new ToucherCapteur(SensorPort.S3),new DistanceCapteur(SensorPort.S4),new CouleurCapteur(SensorPort.S1));//initialisation des capteurs et des moteurs
		int strategie = 6;//choix de la stratégie
		int dMid = 500; //distance pour retourner au milieu. Augmenter si l'on souhaite que le robot aille plus loin
		switch (strategie) {
		case 9 ://pour lancer un code normal sans lancer toute une stratégie
			//pince.fermerObligatoirement();
			//a.avancer(700);
			break;
		//case 0, 1, 2 : si le robot adverse veut être en face on se décale d'une ligne pour prendre nos 3 palets
		case 0: //---------------------------------------en face à gauche---------------------------------------
			a.avancer(100);
			a.tournerD(90);
			p.avancerJusqueLigne();
			a.avancer(100, 200);
			a.tournerG(90);
			p.test3palets1(true);
			a.tournerG(180);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		case 1: //---------------------------------------en face à droite---------------------------------------
			a.avancer(100);
			a.tournerG(90);
			p.avancerJusqueLigne();
			a.avancer(100, 200);
			a.tournerD(90);
			p.test3palets1(true);
			a.tournerG(180);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		case 2: //---------------------------------------en face au milieu---------------------------------------
			a.avancer(100);
			a.tournerG(90);
			p.avancerJusqueLigne();
			a.avancer(100, 200);
			a.tournerD(90);
			p.test3palets1(true);
			a.tournerG(180);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		//case 3, 4, 5 : On prend notre premier palet puis on change de ligne pour en voler un à l'adversaire.
		case 3: //---------------------------------vol s'ils se mettent à gauche---------------------------------
			//se mettre au milieu
			p.case345(true);
			p.avancerPlusPrendrePaletAsync(300);//on prend leur palet du milieu
			a.tournerG(180);
			p.avancerJusqueCouleur("blanc");
			a.stop();
			pince.ouvrir();
			a.avancerAsync(-100); //TODO voir de combien reculer
			pince.fermer();
			a.tournerD(90);
			p.avancerJusqueLigne();
			a.tournerD(90);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		case 4: //---------------------------------vol s'ils se mettent à droite---------------------------------
			//se mettre au milieu
			p.case345(false);
			p.avancerPlusPrendrePaletAsync(300);//on prend leur palet du milieu
			a.tournerG(180);
			p.avancerJusqueCouleur("blanc");
			a.stop();
			pince.ouvrir();
			a.avancerAsync(-100); //TODO voir de combien reculer
			pince.fermer();
			a.tournerG(90);
			p.avancerJusqueLigne();
			a.tournerG(90);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		case 5: //---------------------------------vol s'ils se mettent au milieu---------------------------------
			//se mettre à droite
			p.case345(true);
			p.avancerPlusPrendrePaletAsync(300);//on prend leur palet du milieu
			a.tournerG(180);
			p.avancerJusqueCouleur("blanc");
			a.stop();
			pince.ouvrir();
			a.avancerAsync(-100); //TODO voir de combien reculer
			pince.fermer();
			a.tournerD(180);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		//case 6, 7, 8 : prendre les trois palets de notre ligne
		case 6: //-----------------------------------------normal à droite-----------------------------------------
			p.test3palets1(true);
			a.tournerG(90);
			p.avancerJusqueLigne();
			a.tournerG(90);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		case 7: //-----------------------------------------normal à gauche-----------------------------------------
			p.test3palets1(true);
			a.tournerD(90);
			p.avancerJusqueLigne();
			a.tournerD(90);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		case 8: //-----------------------------------------normal à milieu-----------------------------------------
			p.test3palets1(true);
			a.tournerG(180);
			a.avancer(dMid);
			for(int i = 0; i<100; i++) {
				p.recherche();
				p.recalibrage();
				p.avancerJusqueCouleur("blanc");
				pince.ouvrir();
				a.reculer(100,300);
				pince.fermer();
				a.tournerG(180);
				a.avancer(dMid);
			}
			break;
		}
	}
}	
