package iapackage;

import moteurs.*;
import java.util.Arrays;

import capteurs.*;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.Motor;
import lejos.robotics.RegulatedMotor;
import lejos.robotics.chassis.Chassis;
import lejos.robotics.chassis.Wheel;
import lejos.robotics.chassis.WheeledChassis;
import lejos.robotics.navigation.MovePilot;
import lejos.utility.Delay;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.Port;
import lejos.hardware.port.SensorPort;
import lejos.hardware.BrickFinder;
import lejos.hardware.lcd.GraphicsLCD;
import lejos.hardware.motor.BaseRegulatedMotor;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.Motor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.TachoMotorPort;
import lejos.robotics.Color;
import lejos.robotics.RegulatedMotor;
import lejos.robotics.chassis.Wheel;
import lejos.utility.Delay;
import lejos.robotics.navigation.MovePilot;
import lejos.robotics.navigation.MovePilot.*;
import lejos.robotics.SampleProvider;


public class Principal {
	private static Action a;
	private static ToucherCapteur touch;
	private static Pince pince;
	private static DistanceCapteur distance;
	private static CouleurCapteur color;
 	
	public Principal(Action action, Pince pince, ToucherCapteur t, DistanceCapteur d,CouleurCapteur c) {
		this.a=action;
		this.pince=pince;
		this.touch=t;
		this.distance=d;
		this.color=c;
	}
	
	public void avancerPlusPrendrePalet() {//avance jusqu'a ce qu'un palet soit touché, puis ferme les pinces
		pince.ouvrir();
		a.setVitesse(200);
		a.avancer();
		while(!touch.estTouche()) { //s'arrête que quand le capteur touche le palet
		}
		a.stop();
		pince.fermer();
		a.tournerG(180);
		a.avancer(200);
	}
public void recherche2() {
		float[] tab = new float[0];
		a.asyncTournerG((double)360);
		float min = (float)0.55;
		System.out.println(min);
		while(a.isMoving()) {
			tab=distance.recherche(tab);
			int j=0;
			int t=0;
			if(tab[tab.length-1]!=0 && tab[tab.length-1]+0.05<min){
				j=tab.length-1;
				System.out.println("index debut = " + j + " , valeur = " +tab[j]);
			}
			if(tab[tab.length-1]!=0 && tab[tab.length-1]<min) {
				min=tab[tab.length-1];
			}if((tab.length>1) && (tab[tab.length-1]!=0) && (tab[tab.length-2]-0.05<min) && (tab[tab.length-1]-0.05>min) ){
				t=tab.length-1;
				System.out.println("index fin = " + t + " , valeur = " +tab[t]);
				System.out.println(t-j);
				if ((t-j)<300) {
					a.stop();
					a.tournerD(30);
				}
			}
			
		}

		//System.out.println(Arrays.toString(tab));
		System.out.println(tab.length);
	}
	
	public void recherche() {
		distance.ouvrir();
		Delay.msDelay(200);
		float[] sample = new float[0];
		int i = 0;
		a.asyncTournerG((double)360);
		while(a.isMoving()) {
			sample=distance.recherche(sample);
			i++;
		}
		System.out.println(sample.length);
		
		float[] min = min(sample);
		
		//System.out.println(Arrays.toString(sample));
		//System.out.println(Arrays.toString(min));
		

		System.out.println(min[0]);

		double angleMin = 360.0 *((min[2]+min[3])/2)*1.4 / i; //le *1.4 est un coefficient estimé qui corrige l'angle 
		System.out.println(angleMin);

		a.tournerG(angleMin);
		pince.ouvrir();
		a.avancer(100);
		while(!(touch.estTouche())){
		}
		a.stop();
		pince.fermer();
		a.tournerD(180);
		a.avancer(300, 100);
	//TODO implémenter l'angle pour la "boussole"
	}
	
	public static float[] min(float[] tab) {
		float min = tab[0];
		int indexMin = 0;
		int index1 = 0, index2 = 0;
		for(int i=1;i<tab.length;i++) {
			if(tab[i]!=0 && tab[i]+0.05<min){
				index1 = i;
			}
			if(tab[i]!=0 && tab[i]<min) {
				min=tab[i];
				indexMin=i;
			}if( (tab[i]!=0) && (tab[i-1]-0.05<min) && (tab[i]-0.05>min) ){
				index2 = i;
			}
			
		}
		float[] t = new float[] {min, indexMin, index1, index2};
		System.out.println("Minimum :" + Arrays.toString(t));
		System.out.println(tab.length);
		return t;
	}
	
	public void eviterRobot() {
		if (pince.estFermée()&&touch.estTouche()&&distance.getDistance()<270) {
			float distanceProvisoire=distance.getDistance();
			Delay.msDelay(100);
			if(distance.getDistance()<distanceProvisoire-5)
			a.tournerD(100);
			a.avancer(150,100);
			a.tournerG(100);
		}
	}

	public static void main(String[] args) {
		Principal p = new Principal(new Action(MotorPort.D,MotorPort.C),new Pince(MotorPort.A),new ToucherCapteur(SensorPort.S3),new DistanceCapteur(SensorPort.S4),new CouleurCapteur(SensorPort.S1));
		p.recherche();
		p.avancerPlusPrendrePalet();
		while(color.nomCouleur(color.getCouleur())!="BLANC") {
			p.eviterRobot();
		}
	}
}
